(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{134:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-diff-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-diff-原理"}},[t._v("#")]),t._v(" react diff 原理")]),t._v(" "),a("p",[t._v("diff（翻译差异）：计算一棵树形结构转换成另一棵树形结构的最少操作")]),t._v(" "),a("p",[t._v("1）把树形结构按照层级分解，只比较同级元素")]),t._v(" "),a("p",[t._v("2）给列表结构的每个单元添加唯一的 key 属性，方便比较")]),t._v(" "),a("p",[t._v("3）React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）")]),t._v(" "),a("p",[t._v("4）合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制")]),t._v(" "),a("p",[t._v("5）选择性子树渲染。开发人员可以重写")])])}),[],!1,null,null,null);e.default=s.exports}}]);
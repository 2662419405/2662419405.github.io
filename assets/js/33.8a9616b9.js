(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{77:function(t,v,_){"use strict";_.r(v);var a=_(0),i=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git学习"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git学习"}},[t._v("#")]),t._v(" git学习")]),t._v(" "),_("p",[t._v("工作流程")]),t._v(" "),_("h2",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),_("p",[t._v("工作区(写代码的地方)")]),t._v(" "),_("blockquote",[_("p",[t._v("git add")])]),t._v(" "),_("p",[t._v("暂存区(临时的存储)")]),t._v(" "),_("blockquote",[_("p",[t._v("git commit")])]),t._v(" "),_("p",[t._v("本地库(历史版本)")]),t._v(" "),_("h2",{attrs:{id:"初级操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初级操作"}},[t._v("#")]),t._v(" 初级操作")]),t._v(" "),_("ul",[_("li",[t._v("git status     //状态查看")]),t._v(" "),_("li",[t._v("git add\t\t//添加到暂存区")]),t._v(" "),_("li",[t._v("git rm --cached    //移除暂存区")]),t._v(" "),_("li",[t._v("git commit -m 'xx'\t  //提交到本地库")])]),t._v(" "),_("h2",{attrs:{id:"版本操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本操作"}},[t._v("#")]),t._v(" 版本操作")]),t._v(" "),_("ul",[_("li",[t._v("git log 命令可以显示所有提交过的版本信息")]),t._v(" "),_("li",[t._v("git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）")]),t._v(" "),_("li",[t._v("git reset --hard xxx 索引值")]),t._v(" "),_("li",[t._v("git reset --hard HEAD^ 版本回退一次^^^退三步")]),t._v(" "),_("li",[t._v("git reset --hard HEAD~3   版本回退三步")])]),t._v(" "),_("h2",{attrs:{id:"reset命令的三个参数对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reset命令的三个参数对比"}},[t._v("#")]),t._v(" reset命令的三个参数对比")]),t._v(" "),_("ul",[_("li",[t._v("--soft        仅仅在本地库移动一下指针")]),t._v(" "),_("li",[t._v("--mixed     在本地库移动HEAD指针,重置暂存区")]),t._v(" "),_("li",[t._v("--hard       在本地移动HEAD指针,重置暂存区,重置工作区")])]),t._v(" "),_("h2",{attrs:{id:"查找删除的文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查找删除的文件"}},[t._v("#")]),t._v(" 查找删除的文件")]),t._v(" "),_("ul",[_("li",[t._v("查找永久删除的文件\n"),_("ul",[_("li",[t._v("git reset --hard 版本回退")])])]),t._v(" "),_("li",[t._v("添加到暂存区的文件找回\n"),_("ul",[_("li",[t._v("git reset --hard HEAD")])])]),t._v(" "),_("li",[t._v("前提: 删除前,文件的改动保存在本地库了")]),t._v(" "),_("li",[t._v("操作: git reset --hrad[指针位置]")])]),t._v(" "),_("h2",{attrs:{id:"对比文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对比文件"}},[t._v("#")]),t._v(" 对比文件")]),t._v(" "),_("ul",[_("li",[t._v("diff                       是工作区和暂存区比较")]),t._v(" "),_("li",[t._v("diff HEAD            是工作区和本地库比较")])]),t._v(" "),_("h2",{attrs:{id:"分支管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),_("ul",[_("li",[t._v("命名一采用"),_("code",[t._v("feature")]),t._v("开头,代表功能")])]),t._v(" "),_("h2",{attrs:{id:"分支的具体操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支的具体操作"}},[t._v("#")]),t._v(" 分支的具体操作")]),t._v(" "),_("ul",[_("li",[t._v("git branch -v 查看分支版本")]),t._v(" "),_("li",[t._v("git branch xxx  创建分支")]),t._v(" "),_("li",[t._v("git checkout name  选择分支")]),t._v(" "),_("li",[t._v("合并分支\n"),_("ul",[_("li",[t._v("切换到接受修改的分支上")]),t._v(" "),_("li",[t._v("执行 git merge 被合并的分支上")])])])]),t._v(" "),_("h2",{attrs:{id:"解决冲突"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),_("ul",[_("li",[t._v("首先产生的原因是: 两个分支的内容发生了冲突")]),t._v(" "),_("li",[t._v("解决方式\n"),_("ul",[_("li",[t._v("编辑文件,删除特殊符号")]),t._v(" "),_("li",[t._v("把文件修改到满意的程度")]),t._v(" "),_("li",[t._v("git add [filename]")]),t._v(" "),_("li",[t._v("git commit -m '提交信息'")]),t._v(" "),_("li",[_("strong",[t._v("git commit 不能写文件名字,必须和上面相符")])])])])]),t._v(" "),_("h2",{attrs:{id:"基本原理分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本原理分析"}},[t._v("#")]),t._v(" 基本原理分析")]),t._v(" "),_("h2",{attrs:{id:"哈希"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#哈希"}},[t._v("#")]),t._v(" 哈希")]),t._v(" "),_("ul",[_("li",[t._v("不管输入量多大,他得到的加密结果长度是固定")]),t._v(" "),_("li",[t._v("输入唯一的一个明文,可以得到唯一的密文")]),t._v(" "),_("li",[t._v("输入的明文差异很小,变化很大")]),t._v(" "),_("li",[t._v("不可逆的")])]),t._v(" "),_("h2",{attrs:{id:"github使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#github使用"}},[t._v("#")]),t._v(" "),_("code",[t._v("github")]),t._v("使用")]),t._v(" "),_("ul",[_("li",[t._v("git remote -v                        查看远程库")]),t._v(" "),_("li",[t._v("git remote add origin(别名) https://xxxxxxxx地址              创建连接")])]),t._v(" "),_("h2",{attrs:{id:"远程分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程分支操作"}},[t._v("#")]),t._v(" 远程分支操作")]),t._v(" "),_("ul",[_("li",[t._v("git push origin master   //推送分支,远程库别名,分支名")])]),t._v(" "),_("h2",{attrs:{id:"克隆仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#克隆仓库"}},[t._v("#")]),t._v(" 克隆仓库")]),t._v(" "),_("ul",[_("li",[t._v("下载到本地")]),t._v(" "),_("li",[t._v("创建origin远程地址别名")]),t._v(" "),_("li",[t._v("初始化本地库")])]),t._v(" "),_("h2",{attrs:{id:"多人开发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多人开发"}},[t._v("#")]),t._v(" 多人开发")]),t._v(" "),_("ul",[_("li",[t._v("某个项目->setting->Collaborators->选择某个用户")]),t._v(" "),_("li",[t._v("用户就会接收到邀请,同意之后就可以加入到推送中")])]),t._v(" "),_("h2",{attrs:{id:"拉取仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拉取仓库"}},[t._v("#")]),t._v(" 拉取仓库")]),t._v(" "),_("ul",[_("li",[t._v("pull = merge + fetch             拉取,等于下面两个命令\n"),_("ul",[_("li",[t._v("fetch  远程地址名  远程分支名      只是抓取下来,并没有合并")]),t._v(" "),_("li",[t._v("merge origin/master    合并文件")])])])]),t._v(" "),_("h2",{attrs:{id:"git工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git工作流程"}},[t._v("#")]),t._v(" git工作流程")]),t._v(" "),_("h2",{attrs:{id:"集中式工作流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集中式工作流"}},[t._v("#")]),t._v(" 集中式工作流")]),t._v(" "),_("h2",{attrs:{id:"gitflow-最常用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitflow-最常用"}},[t._v("#")]),t._v(" "),_("code",[t._v("GitFlow")]),t._v("(最常用)")]),t._v(" "),_("ul",[_("li",[t._v("通过分支去解决开发")]),t._v(" "),_("li",[t._v("hotfix 一般是解决bug")]),t._v(" "),_("li",[t._v("develop 开发")]),t._v(" "),_("li",[t._v("feature_xxx 功能分支,基于develop开发")]),t._v(" "),_("li",[t._v("release 完成功能前的最终测试")])]),t._v(" "),_("h2",{attrs:{id:"forking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#forking"}},[t._v("#")]),t._v(" Forking")])])}),[],!1,null,null,null);v.default=i.exports}}]);
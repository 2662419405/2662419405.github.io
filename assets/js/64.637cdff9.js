(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{106:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",[t._v("之所以将负载均衡作为拓展内容，是因为如果是你自己搭建的个人网站，或者中小型网站，其实并不需要考虑多大的并发量，但是如果你搭建的是大型网站，负载均衡便是开发过程不可或缺的步骤。")])]),t._v(" "),e("h2",{attrs:{id:"nodejs处理io密集的请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs处理io密集的请求"}},[t._v("#")]),t._v(" Nodejs处理IO密集的请求")]),t._v(" "),e("p",[t._v("我们都知道node的核心是事件驱动，通过loop去异步处理用户请求，相比于传统的后端服务，它们都是将用户的每个请求分配到异步队列进行处理。事件驱动的最大优势是什么？就是在高并发IO时，不会造成堵塞，对于直播类网站，这点是至关重要的，我们有成功的先例——快手，快手强大的IO高并发究其本质一定能追溯到node。")]),t._v(" "),e("ul",[e("li",[t._v("一般现在的企业网站都会做一个中间层,比如淘宝的双十一,可以很大的减轻负担")])]),t._v(" "),e("h2",{attrs:{id:"pm2实现node-js“多线程”"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pm2实现node-js“多线程”"}},[t._v("#")]),t._v(" pm2实现Node.js“多线程”")]),t._v(" "),e("p",[t._v("那些说node不行的都是指着node是单线程这一个软肋开撕，告诉你，我们有解决方案了——pm2,就是能在你的计算机里的每一个内核都启动一个node.js服务，也就是说如果你的电脑或者服务器是多核处理器（现在也少见单核了吧），它就能启动多个node.js服务，并且它能够自动控制负载均衡，会自动将用户的请求分发至压力小的服务进程上处理。")]),t._v(" "),e("h2",{attrs:{id:"nginx搭建反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx搭建反向代理"}},[t._v("#")]),t._v(" nginx搭建反向代理")]),t._v(" "),e("p",[t._v("所谓代理就是我们通常所说的中介，网站的反向代理就是指那台介于用户和我们真实服务器之间的服务器，它的作用便是能够将用户的请求分配到压力较小的服务器上，其机制是轮询。听完这句话是不是感觉很耳熟，没错，在我介绍pm2的时候也说过同样的话，反向代理起到的作用同pm2一样也是实现负载均衡，你现在应该也明白了两者之间的差异，反向代理是对服务器实现负载均衡，而pm2是对进程实现负载均衡")])])}),[],!1,null,null,null);s.default=n.exports}}]);